version: '3'

services:

  postgres:
    restart: always
    image: mdillon/postgis:9.4-alpine
    environment:
      - POSTGRES_DB=${COOPCYCLE_DB_NAME}
    ports:
      - '5432:5432'
    volumes:
      - 'pg_data:/var/lib/postgresql/data'

  redis:
    restart: always
    image: redis:5-alpine
    ports:
      - '6379:6379'

  webpack:
    build:
      dockerfile: './docker/webpack/Dockerfile'
      context: '.'
    image: coopcycle/webpack
    environment:
      WEBPACK_PUBLIC_PATH: http://${DEV_HOST_IP:-localhost}:8080/
    ports:
      - '8080:8080'
    volumes:
      # https://stackoverflow.com/questions/29181032/add-a-volume-to-docker-but-exclude-a-sub-folder
      - '.:/srv/coopcycle'
      - 'webpack_php_cache:/srv/coopcycle/var/cache'
      - 'node_modules_webpack:/srv/coopcycle/node_modules/'

  osrm:
    build: './docker/osrm'
    ports:
      - '5000:5000'
    volumes:
      - './var/osrm:/data'
    environment:
      - OSRM_FILENAME=data.osrm

  php:
    image: ${IMAGES_PREFIX:-}app-php
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - osrm
      - centrifugo
      - stripe_mock
    links:
      - osrm
      - stripe_mock
      - browserless
    environment:
      SERVER_NAME: ${SERVER_NAME:-http://localhost}, php:80
      MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16}
      TRUSTED_HOSTS: ^${TRUSTED_HOSTS:-localhost}|php$$
      # Run "composer require symfony/orm-pack" to install and configure Doctrine ORM
#      DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-15}&charset=${POSTGRES_CHARSET:-utf8}
      # Run "composer require symfony/mercure-bundle" to install and configure the Mercure integration
      MERCURE_URL: ${CADDY_MERCURE_URL:-http://php/.well-known/mercure}
      MERCURE_PUBLIC_URL: https://${SERVER_NAME:-localhost}/.well-known/mercure
      MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      # Make sure "base_url" has a trailing slash
      # https://github.com/FriendsOfBehat/SymfonyExtension/issues/124
#      - 'BEHAT_PARAMS={"extensions":{"Behat\\MinkExtension":{"base_url": "http://nginx_test:80/" } } }'
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_CONNECT_CLIENT_ID: ${STRIPE_CONNECT_CLIENT_ID}
      ALGOLIA_PLACES_APP_ID: ${ALGOLIA_PLACES_APP_ID}
      ALGOLIA_PLACES_API_KEY: ${ALGOLIA_PLACES_API_KEY}
      ALGOLIA_PLACES_ADDRESS_TEMPLATE: ${ALGOLIA_PLACES_ADDRESS_TEMPLATE}
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
      # HTTP/3
      - target: 443
        published: ${HTTP3_PORT:-443}
        protocol: udp

  php_worker:
    image: ${IMAGES_PREFIX:-}app-php
    restart: unless-stopped
    depends_on:
      php:
        condition: service_healthy
    command: php bin/console messenger:consume async --limit=100 --time-limit=900 -n
    environment:
      - GOOGLE_API_KEY
      - STRIPE_PUBLISHABLE_KEY
      - STRIPE_SECRET_KEY

  smtp:
    image: namshi/smtp
    ports:
      - 25:25

  stripe_mock:
    image: stripe/stripe-mock:latest
    ports:
      - '12111:12111'

  browserless:
    image: browserless/chrome
    environment:
      - DEBUG=browserless/chrome*

  mjml:
    image: adrianrudnik/mjml-server:2.4.0
    ports:
      - 8889:80
    environment:
      - CORS=*
      - MJML_KEEP_COMMENTS=true
      - MJML_VALIDATION_LEVEL=strict
      - MJML_MINIFY=false

  minio:
    image: minio/minio
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ACCESS_KEY=${S3_CREDENTIALS_KEY}
      - MINIO_SECRET_KEY=${S3_CREDENTIALS_SECRET}
      - MINIO_REGION=${S3_REGION}

  # https://github.com/minio/minio/issues/4882
  # https://docs.min.io/docs/minio-client-complete-guide#policy
  minio_client:
    image: minio/mc
    depends_on:
      - minio
    environment:
      - S3_CREDENTIALS_KEY
      - S3_CREDENTIALS_SECRET
      - S3_REGION
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add coopcycle http://minio:9000 $S3_CREDENTIALS_KEY $S3_CREDENTIALS_SECRET;
      /usr/bin/mc mb --region $S3_REGION --ignore-existing coopcycle/edifact/;
      /usr/bin/mc mb --region $S3_REGION --ignore-existing coopcycle/images/;
      /usr/bin/mc mb --region $S3_REGION --ignore-existing coopcycle/images/assets/;
      /usr/bin/mc mb --region $S3_REGION --ignore-existing coopcycle/images/products/;
      /usr/bin/mc mb --region $S3_REGION --ignore-existing coopcycle/images/receipts/;
      /usr/bin/mc mb --region $S3_REGION --ignore-existing coopcycle/images/restaurants/;
      /usr/bin/mc mb --region $S3_REGION --ignore-existing coopcycle/images/stores/;
      /usr/bin/mc mb --region $S3_REGION --ignore-existing coopcycle/images/tasks/;
      /usr/bin/mc policy set public coopcycle/images/;
      "

  tile38:
    image: tile38/tile38

  vroom:
    image: vroomvrp/vroom-docker:v1.8.0
    ports:
      - "3000:3000"
    volumes:
      - ./vroom-conf/:/conf
    environment:
      - VROOM_ROUTER=osrm  # router to use, osrm or ors
    depends_on:
      - osrm

  sonic:
    image: valeriansaliou/sonic:v1.3.0
    ports:
      - "1491:1491"
    volumes:
      - ./sonic.cfg:/etc/sonic.cfg

  centrifugo:
    image: centrifugo/centrifugo:v2
    ports:
      - "8100:8000"
    depends_on:
      - redis
    environment:
      - CENTRIFUGO_TOKEN_HMAC_SECRET_KEY
      - CENTRIFUGO_API_KEY
      - CENTRIFUGO_V3_USE_OFFSET=true
      - CENTRIFUGO_ENGINE=redis
      - CENTRIFUGO_REDIS_URL=redis://redis:6379
      - CENTRIFUGO_ADMIN=true
      - CENTRIFUGO_ADMIN_PASSWORD=centrifugo
      - CENTRIFUGO_ADMIN_SECRET=centrifugo

  # https://cube.dev/docs/getting-started-docker
  cube:
    image: cubejs/cube:v0.34
    ports:
      - 4000:4000
    depends_on:
      - postgres
    environment:
      - CUBEJS_DB_TYPE=postgres
      - CUBEJS_DB_HOST=${COOPCYCLE_DB_HOST}
      - CUBEJS_DB_PORT=${COOPCYCLE_DB_PORT}
      # - CUBEJS_DB_NAME=${COOPCYCLE_DB_NAME}
      - CUBEJS_DB_USER=${COOPCYCLE_DB_USER}
      - CUBEJS_DB_PASS=${COOPCYCLE_DB_PASSWORD}
      - CUBEJS_WEB_SOCKETS=true
      - CUBEJS_DEV_MODE=true
      - CUBEJS_API_SECRET
      - CUBEJS_SCHEMA_PATH=schema
      - CUBEJS_CACHE_AND_QUEUE_DRIVER=memory
    volumes:
      - ./cube:/cube/conf/schema
      - ./cube.js:/cube/conf/cube.js
    logging:
      driver: none

  typesense:
    image: typesense/typesense:0.22.2
    ports:
      - 8108:8108
    environment:
      - TYPESENSE_API_KEY
      - TYPESENSE_DATA_DIR=/data
    volumes:
      - typesense_data:/data
    logging:
      driver: none


  storybook-react:
    build:
      dockerfile: './docker/storybook-react/Dockerfile'
      context: '.'
    ports:
      - '6007:6007'
    depends_on:
      - webpack
    volumes:
      # https://stackoverflow.com/questions/29181032/add-a-volume-to-docker-but-exclude-a-sub-folder
      - '.:/srv/coopcycle'
      - 'node_modules_webpack:/srv/coopcycle/node_modules/'

  storybook:
    build:
      dockerfile: './docker/storybook/Dockerfile'
      context: '.'
    ports:
      - '6006:6006'
    depends_on:
      - webpack
      - storybook-react
    volumes:
      # https://stackoverflow.com/questions/29181032/add-a-volume-to-docker-but-exclude-a-sub-folder
      - '.:/srv/coopcycle'
      - 'node_modules_webpack:/srv/coopcycle/node_modules/'

# Mercure is installed as a Caddy module, prevent the Flex recipe from installing another service
###> symfony/mercure-bundle ###
###< symfony/mercure-bundle ###

volumes:
  caddy_data:
  caddy_config:
  node_modules_webpack:
  pg_data:
  php_cache:
  minio_data:
  typesense_data:
  webpack_php_cache:
  php_logs:
###> symfony/mercure-bundle ###
###< symfony/mercure-bundle ###
