framework:
    messenger:
        default_bus: event.bus
        buses:
            command.bus:
                default_middleware: true
                # https://symfony.com/doc/current/messenger.html#middleware-for-doctrine
                middleware:
                    # service ids that implement Symfony\Component\Messenger\Middleware\MiddlewareInterface
                    - 'AppBundle\Messenger\MockDateMiddleware'
                    - 'AppBundle\Messenger\RequestIdMiddleware'
                    - 'AppBundle\Messenger\RouteMiddleware'
                    # each time a message is handled, the Doctrine connection
                    # is "pinged" and reconnected if it's closed. Useful
                    # if your workers run for a long time and the database
                    # connection is sometimes lost
                    - doctrine_ping_connection
                    # After handling, the Doctrine connection is closed,
                    # which can free up database connections in a worker,
                    # instead of keeping them open forever
                    - doctrine_close_connection
            event.bus:
                default_middleware: true
                # https://symfony.com/doc/current/messenger.html#middleware-for-doctrine
                middleware:
                    # service ids that implement Symfony\Component\Messenger\Middleware\MiddlewareInterface
                    - 'AppBundle\Messenger\RequestIdMiddleware'
                    - 'AppBundle\Messenger\RouteMiddleware'
                    - 'AppBundle\Messenger\EventStoreMiddleware'
                    # each time a message is handled, the Doctrine connection
                    # is "pinged" and reconnected if it's closed. Useful
                    # if your workers run for a long time and the database
                    # connection is sometimes lost
                    - doctrine_ping_connection
                    # After handling, the Doctrine connection is closed,
                    # which can free up database connections in a worker,
                    # instead of keeping them open forever
                    - doctrine_close_connection
        transports:
            # https://symfony.com/doc/current/messenger.html#redis-transport
            #
            # When running multiple multiple Redis consumers, you may have error:
            # "Could not acknowledge redis message"
            #
            # This is because each Redis consumer must be unique.
            # Make sure to pass a DSN with a unique consumer name for each process.
            #
            # redis://localhost:6379/<stream>/<group>/<name>
            #
            # https://github.com/symfony/symfony/issues/35358
            # https://github.com/symfony/symfony-docs/pull/11869
            # https://github.com/symfony/symfony-docs/pull/14888
            #
            async: "%env(MESSENGER_TRANSPORT_DSN)%"
        routing:
            'AppBundle\Message\CalculateRoute': async
            'AppBundle\Message\DeliveryCreated': async
            'AppBundle\Message\Email': async
            'AppBundle\Message\PushNotification': async
            'AppBundle\Message\ImportTasks': async
            'AppBundle\Message\OrderReceiptEmail': async
            'AppBundle\Message\Sms': async
            'AppBundle\Message\UpdateLocation': async
            'AppBundle\Message\TopBarNotification': async
            'AppBundle\Message\Webhook': async
            'AppBundle\Message\IndexDeliveries': async
            'AppBundle\Message\WoopitDocumentWebhook': async
            'AppBundle\Message\ImportDeliveries': async
            'AppBundle\Message\CalculateTaskDistance': async
            'AppBundle\Message\CopyProducts': async
