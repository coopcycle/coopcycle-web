# Default values for api-platform.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

php:
  image:
    repository: "chart-example.local/api-platform/php"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  appEnv: prod
  appDebug: "0"
  appSecret: ""
  corsAllowOrigin: "^https?://.*?\\.chart-example\\.local$"
  trustedHosts: "^127\\.0\\.0\\.1|localhost|.*\\.chart-example\\.local$"
  trustedProxies:
    - "127.0.0.1"
    - "10.0.0.0/8"
    - "172.16.0.0/12"
    - "192.168.0.0/16"
  caddyGlobalOptions: ""

# You may prefer using the managed version in production: https://mercure.rocks
mercure:
  publicUrl: https://chart-example.local/.well-known/mercure
  # Change me!
  jwtSecret: "!ChangeThisMercureHubJWTSecretKey!"
  extraDirectives: cors_origins http://chart-example.local https://chart-example.local

# Full configuration: https://github.com/bitnami/charts/tree/master/bitnami/postgresql
postgresql:
  enabled: true
  # If bringing your own PostgreSQL, the full uri to use
  #url: postgresql://api-platform:!ChangeMe!@database:5432/api?serverVersion=13&charset=utf8
  global:
    postgresql:
      port: "5432"
      auth:
        username: "example"
        password: "!ChangeMe!"
        database: "coopcycle"
        postgresPassword: "!AdminUserPasswordChangeMe!"
  # Persistent Volume Storage configuration.
  # ref: https://kubernetes.io/docs/user-guide/persistent-volumes
  primary:
    persistence:
      enabled: true
      storageClass: standard
      size: 1Gi
    pullPolicy: IfNotPresent
    image:
      repository: bitnami/postgresql
      tag: 14
    resources:
      requests:
        memory: 50Mi
        cpu: 1m
    initdb:
      scripts:
        postgis.sh: |
          export PGPASSWORD="!AdminUserPasswordChangeMe!"
          psql -U postgres -d coopcycle -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          psql -U postgres -d coopcycle -c "CREATE EXTENSION IF NOT EXISTS postgis_topology;"
          psql -U postgres -d coopcycle -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Full configuration: https://github.com/bitnami/charts/tree/main/bitnami/minio
minio:
  enabled: true
  auth:
    rootUser: "minio"
    rootPassword: "coopcycle"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# If you use Mercure, you need the managed or the On Premise version to deploy more than one pod: https://mercure.rocks/docs/hub/cluster
replicaCount: 1

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
